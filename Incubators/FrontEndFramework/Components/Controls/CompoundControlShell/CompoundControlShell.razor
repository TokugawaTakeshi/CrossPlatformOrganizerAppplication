<div class="CompoundControlShell @rootElementModifierCSS_Classes @spaceSeparatedAdditionalCSS_Classes">
  
  @if (mustDisplayHeader)
  {
    <div class="CompoundControlShell-Header">
    
      <label
        v-if=@(label is not null)
        for=@coreElementHTML_ID
        id=@labelElementHTML_ID
        class="CompoundControlShell--YDF-Label"
      >
        @label
      </label>    
   
      @if (mustDisplayRequiredInputBadge)
      {
        <span class="CompoundControlShell--YDF-Badge CompoundControlShell--YDF-Badge__RequiredInput">必須</span>  
      }
      
      else if (mustDisplayOptionalInputBadge)
      {
        <span class="CompoundControlShell--YDF-Badge CompoundControlShell--YDF-Badge__OptionalInput">任意</span>  
      }
      
      else if (mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge)
      {
        <span class="CompoundControlShell--YDF-Badge CompoundControlShell--YDF-Badge__Invisible"></span>  
      }
      
    </div>  
  }
  
  
  @if (guidance is not null)
  {
    <p class="CompoundControlShell--YDF-Guidance">
      @((MarkupString)guidance)
    </p>  
  }

  
  <div class="CompoundControlShell-MainSlotCustomizableWrapper @mainSlotSpaceSeparatedAdditionalCSS_Classes">
    
    @ChildContent
    
  </div>
  
  
  @if (invalidInputHighlightingIfAnyValidationErrorsMessages && validationErrorsMessages.Length > 0)
  {
    <ul class="CompoundControlShell--YDF-ValidationErrorsMessagesList">
  
      @foreach (string validationErrorMessage in validationErrorsMessages)
      {
        <li 
          class="CompoundControlShell--YDF-ValidationErrorMessage"
          @key=@($"VALIDATION_ERROR_MESSAGE-{ validationErrorMessage }")
        >
          @validationErrorMessage
        </li>  
      }
      
    </ul>  
  }
  
</div>