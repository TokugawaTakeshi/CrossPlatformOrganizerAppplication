@page "/people_list"

@using BusinessRules.Enterprise
@using Gateways


<h1>People list</h1>

@if (isWaitingForFirstRetrievingOfPeople || arePeopleBeingRetrievedNow)
{
  @foreach (uint unused in new uint[5])
  {
    <PersonCardLoadingPlaceholder />  
  }
}

else if (isPeopleRetrievingErrorOccurred)
{
  <div class="alert alert-danger" role="alert">
    大変申し訳ございません、データ取得中問題が発生しました。
    <br>
    <button 
      type="button"
      class="btn btn-secondary mt-1" 
      @onclick="() => RetrievePeopleSelection()"
    >取得再試験</button>
  </div>
}

else if (totalPeopleCount == 0)
{
  <div class="alert alert-info" role="alert">
    現在、人が一名も登録されちえません。
    <br>
    <a class="btn btn-primary" href="#" role="button">登録しましょう</a>
  </div>
}

else if (totalPeopleCountInSelection == 0)
{
  <div class="alert alert-info" role="alert">
    検索・フィルタリングと合っている人はいません。
    <br>
   <button class="btn btn-primary" type="submit">フィルタリングをリセット</button>
  </div>
}

else
{
  
  <div class="container">
    
    @foreach (Person person in peopleSelectionActualForCurrentPaginationPage)
    {
      <PersonCard Person="person"/>  
    }
    
  </div>
}


@code
{

  private readonly IPersonGateway personGateway = ClientDependencies.Injector.gateways().Person;
  
  private uint totalPeopleCount;
  private uint totalPeopleCountInSelection;
  
  private List<Person> peopleSelectionActualForCurrentPaginationPage;
  
  private bool isWaitingForFirstRetrievingOfPeople = true;
  private bool arePeopleBeingRetrievedNow;
  private bool isPeopleRetrievingErrorOccurred;

  private uint currentPeoplePaginationPageNumber = 1;
  private string currentFilteringByFullOrPartialName = "";
  private readonly uint PEOPLE_COUNT_PER_PAGINATION_PAGE = 20;

  
  protected override async Task OnInitializedAsync()
  {
    await RetrievePeopleSelection();
  }
  

  private async Task RetrievePeopleSelection(
	#nullable enable
    uint? paginationPageNumber = null,
    string? filteringByName = null
	#nullable disable
  )
  {

    IPersonGateway.SelectionRetrieving.ResponseData responseData;
    
    isWaitingForFirstRetrievingOfPeople = false;
    arePeopleBeingRetrievedNow = true;
    isPeopleRetrievingErrorOccurred = false;

    currentPeoplePaginationPageNumber = paginationPageNumber ?? currentPeoplePaginationPageNumber;
    currentFilteringByFullOrPartialName = filteringByName ?? currentFilteringByFullOrPartialName;

    try
    {

	    responseData = await personGateway.RetrieveSelection(
        new IPersonGateway.SelectionRetrieving.RequestParameters(
          paginationPageNumber: currentPeoplePaginationPageNumber,
          itemsCountPerPaginationPage: PEOPLE_COUNT_PER_PAGINATION_PAGE,
          filteringByName: currentFilteringByFullOrPartialName 
        )
      );

    }
    catch (Exception exception)
    {
     
      Console.WriteLine(exception);
      isPeopleRetrievingErrorOccurred = true;
      return;
      
    }
    finally
    {
      
      arePeopleBeingRetrievedNow = false;
      
    }
    
    
    peopleSelectionActualForCurrentPaginationPage = responseData.SelectionItemsOfSpecifiedPaginationPage;
    totalPeopleCount = responseData.TotalItemsCount;
    totalPeopleCountInSelection = responseData.TotalItemsCountInSelection;
    
  }
}
