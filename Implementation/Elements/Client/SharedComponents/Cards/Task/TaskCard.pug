mixin TaskCard(properties)

  -

    const {
      task,
      rootElementTag = "div",
      disabled = false
    } = properties;

    if (rootElementTag === "a") {
      throw new Error(
        "The \"a\" could not be the root element of \"TaskCard\" component because it has the internal links while " +
          "the nested links are not allowed by HTML5 standard."
      )
    }

    
  #{ rootElementTag }.TaskCard&attributes(attributes)(
    tabindex="0"
    class=(disabled ? "TaskCard__DisabledState" : null)
  )

    span.TaskCard-Checkbox(
      role="checkbox"
      aria-checked= String(task.isComplete)
      tabindex="0"
    )
    
      if task.isComplete
        
        +Checkbox__Checked--YDF_Icon.TaskCard-Checkbox-Icon
        
      else

        +Checkbox__Unchecked--YDF_Icon.TaskCard-Checkbox-Icon

    .TaskCard-Title= task.title

    -
      
      const badgesFlags = {
        deadlineDateTime: isNeitherUndefinedNorNull(task.deadlineDateTime),
        deadlineDate: isNeitherUndefinedNorNull(task.deadlineDate),
        associatedDate: task.areStartingAndEndingDatesAreDefinedAndEven,
        priority: isNeitherUndefinedNorNull(task.priority)
      };
      
    if Object.values(badgesFlags).includes(true)

      .TaskCard-BadgesFlow
      
        if badgesFlags.deadlineDateTime
    
          +Badge--YDF({
            key: "Deadline",
            value: new Date(task.deadlineDateTime).toLocaleString(),
            decorativeVariation: task.hasDeadlineDefinedAndExpired ? 
                Badge__YDF.DecorativeVariations.veryCatchyBright : Badge__YDF.DecorativeVariations.catchyBright 
          }): +Calendar__Time--YDF_Icon.Badge--YDF-SVG_Icon
      
        if badgesFlags.deadlineDate

          +Badge--YDF({
            key: "Deadline",
            value: new Date(task.deadlineDate).toLocaleDateString(),
            decorativeVariation: task.hasDeadlineDefinedAndExpired ? 
                Badge__YDF.DecorativeVariations.veryCatchyBright : Badge__YDF.DecorativeVariations.catchyBright
          }): +Calendar__Time--YDF_Icon.Badge--YDF-SVG_Icon
      
        if badgesFlags.associatedDate

          - const formattedLocalDate = new Date(task.startingDate ?? task.startingDateTime).toLocaleDateString();
          
          +Badge--YDF({
            key: "Date",
            value: formattedLocalDate,
            decorativeVariation: Badge__YDF.DecorativeVariations.catchyBright
          }): +Calendar--YDF_Icon.Badge--YDF-SVG_Icon
      
        if badgesFlags.priority

          +Badge--YDF({
            key: "Priority",
            value: String(task.priority),
            decorativeVariation: (() => {
              switch (task.priority) {
                case 1: return Badge__YDF.DecorativeVariations.veryCatchyBright
                case 2: return Badge__YDF.DecorativeVariations.catchyBright
                default: return Badge__YDF.DecorativeVariations.modestlyCatchyBright
              }
            })()
          })

    if task.description

      p.TaskCard-Description= task.description


include LoadingPlaceholder/TaskCardLoadingPlaceholder.pug
