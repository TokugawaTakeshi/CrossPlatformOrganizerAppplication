include RadioButtonsGroup.class.pug

  
mixin RadioButtonsGroup--YDF(properties, statesSimulations)

  -

    const {

      selectingOptions,
      
      label,
      accessibilityGuidance,
      externalLabelHTML_ID,
      guidance,

      disabled = false,
      readonly = false,

      required = false,
      mustDisplayAppropriateBadgeIfInputIsRequired = false,
      mustDisplayAppropriateBadgeIfInputIsOptional = false,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge = false,

      // theme = RadioButtonsGroup__YDF.Themes.regular,
      // areThemesExternal = RadioButtonsGroup__YDF.areThemesExternal,
      // geometry = RadioButtonsGroup__YDF.GeometricVariations.regular,
      // decoration = RadioButtonsGroup__YDF.GeometricVariations.regular,

      rootElementHTML_ID = RadioButtonsGroup__YDF.generateComponentID(),
      labelElementHTML_ID = `${ rootElementHTML_ID }-LABEL`,
            
      radioButtonsHTML_Name = rootElementHTML_ID,
            
            
    } = properties;
    
    const {
      invalidInputHighlightingIfAnyValidationErrorsMessages = false,
      validValueHighlightingIfNoValidationErrorsMessages = false,
      validationErrorsMessages = []
    } = statesSimulations ?? {}; 
    
    /*
    = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: statesSimulations,
      parameterNumber: 2,
      parameterName: "statesSimulations",
      parameterPropertiesSpecification: TextBox__YDF.stateSimulationsSpecification,
      mixinName: "TextBox--YDF"
    });
   */
    
    /*
    } = PugMixinsObjectTypeParametersProcessor.processParameter({
      rawParameter: properties,
      parameterNumber: 1,
      parameterName: "properties",
      parameterPropertiesSpecification: RadioButtonsGroup__YDF.propertiesSpecification,
      mixinName: "RadioButtonsGroup--YDF"
    });
     */

  //-
    theme: TextBox__YDF.selfAndCompoundControlShellThemesCorrespondence[theme],
    areThemesExternal,
    geometry: TextBox__YDF.selfAndCompoundControlShellGeometricVariationsCorrespondence[geometry],
    decoration: TextBox__YDF.selfAndCompoundControlShellGeometricVariationsCorrespondence[decoration]
    
  +CompoundControlShell--YDF(
    {

      label,
      guidance,

      required,
      mustDisplayAppropriateBadgeIfInputIsRequired,
      mustDisplayAppropriateBadgeIfInputIsOptional,
      mustAddInvisibleBadgeForHeightEqualizingWhenNoBadge,
      coreElementHTML_ID: radioButtonsFlowElementID,
      labelElementHTML_ID: labelElementHTML_ID

    },
    {
      invalidInputHighlightingIfAnyValidationErrorsMessages,
      validValueHighlightingIfNoValidationErrorsMessages,
      validationErrorsMessages
    }
  ).RadioButtonsGroup--YDF&attributes(attributes)

    .RadioButtonsGroup--YDF-Flow(
      role="radiogroup"
      aria-labelledby=labelElementHTML_ID || externalLabelHTML_ID
      aria-disabled=disabled
    )

      each selectingOption in selectingOptions

        +RadioButton--YDF({
          label: selectingOption.label,
          HTML_Name: radioButtonsHTML_Name,
          HTML_Value: selectingOption.value,
          isChecked: selectingOption.isSelected
        })
